[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61", "setuptools_scm[toml]>=7"]

[project]
name = "gto"
description = "Version and deploy your models following GitOps principles"
readme = "README.md"
license = {text = "Apache License 2.0"}
authors = [{name = "Alexander Guschin", email = "aguschin@iterative.ai"}]
keywords = ["git", "repo", "repository", "artifact", "registry", "developer-tools", "collaboration"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.9"
dynamic = ["version"]
dependencies = [
    "entrypoints",
    "funcy",
    # pydantic.v1.parse_obj is broken in ==2.0.0:
    # https://github.com/pydantic/pydantic/issues/6361
    "pydantic>=1.9.0,<3,!=2.0.0",
    "rich",
    "ruamel.yaml",
    "scmrepo>=3,<4",
    "semver>=2.13.0",
    "tabulate>=0.8.10",
    "typer>=0.4.1",
]

[project.urls]
Issues = "https://github.com/iterative/gto/issues"
Source = "https://github.com/iterative/gto"

[project.optional-dependencies]
tests = [
    "freezegun",
    "pygit2",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-test-utils",
]
dev = [
    "gto[tests]",
    "mypy==1.13.0",
    "pylint==3.3.2",
    "types-PyYAML",
    "types-filelock",
    "types-freezegun",
    "types-requests",
    "types-setuptools",
    "types-six",
    "types-tabulate",
]

[project.scripts]
gto = "gto.cli:app"

[project.entry-points."gto.enrichment"]
gto = "gto.index:GTOEnrichment"

[tool.setuptools_scm]
write_to = "gto/_gto_version.py"

[tool.pytest.ini_options]
addopts = "-rav --durations=0 --cov=gto --cov-report=term-missing --cov-report=xml"
log_level = "debug"
markers = [
    "long: Marks long-running tests",
]
testpaths = ["tests"]

[tool.mypy]
files = ["gto", "tests"]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
disable_error_code = ["misc"]
plugins = ["pydantic.mypy"]
# See https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports.
ignore_missing_imports = true
check_untyped_defs = false
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true

[tool.ruff]
output-format = "full"
show-fixes = true

[tool.ruff.lint]
extend-select = ["I", "B", "C4", "C90", "T10", "Q"]

[tool.ruff.lint.isort]
known-first-party = ["gto", "tests"]

[tool.pylint.master]
extension-pkg-whitelist = ["pydantic", "pytest-lazy-fixture", "pygit2", "pytest"]
load-plugins= ["pylint.extensions.no_self_use"]

[tool.pylint.message_control]
enable = ["c-extension-no-member", "no-else-return", "no-self-use"]
disable = [
    "format", "refactoring", "spelling", "design",
    "invalid-name", "duplicate-code", "fixme",
    "unused-wildcard-import", "cyclic-import", "wrong-import-order",
    "wrong-import-position", "ungrouped-imports", "multiple-imports",
    "logging-format-interpolation", "logging-fstring-interpolation",
    "missing-function-docstring", "missing-module-docstring",
    "missing-class-docstring", "raise-missing-from", "import-outside-toplevel",
    "redefined-builtin", # fixme
]

[tool.pylint.variables]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_|args|kwargs"
